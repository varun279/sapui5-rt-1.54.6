sinaDefine(['../../core/core','../../sina/ComplexCondition','../../sina/ComparisonOperator','./typeConverter'],function(c,C,a,t){var b=c.defineClass({_init:function(d){this.dataSource=d;},convertSinaToInaOperator:function(s){switch(s){case a.Eq:return'=';case a.Lt:return'<';case a.Gt:return'>';case a.Le:return'<=';case a.Ge:return'>=';default:throw new c.Exception('unknow comparison operator '+s);}},serializeComplexCondition:function(d){var r={Selection:{Operator:{Code:d.operator,SubSelections:[]}}};var s=d.conditions;for(var i=0;i<s.length;++i){var e=s[i];r.Selection.Operator.SubSelections.push(this.serialize(e));}return r;},serializeSimpleCondition:function(d){if(!d.value){return;}var e=d.attribute;var f;if(e.slice(0,2)==='$$'){f=this.dataSource.sina.AttributeType.String;}else{var m=this.dataSource.getAttributeMetadata(e);f=m.type;}var o='MemberOperand';if(e==='$$SuggestionTerms$$'||e==='$$SearchTerms$$'){o='SearchOperand';}var r={};r[o]={AttributeName:e,Comparison:this.convertSinaToInaOperator(d.operator),Value:t.sina2Ina(f,d.value,{operator:d.operator})};return r;},serialize:function(d){if(d instanceof C){return this.serializeComplexCondition(d);}else{return this.serializeSimpleCondition(d);}}});return{serialize:function(d,e){var s=new b(d);return s.serialize(e);}};});
